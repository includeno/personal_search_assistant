# https://docs.github.com/en/actions/guides
# CI name , it will display on github's action page menu
name: Release
# trigger on which this CI should be run
on: # push operation is operate
  push:
    # here since my repository branch is named `main` , you should follow your own repository like `master`
    branches: [main,dev]
# CI enviroment settings
env:
  #STATE_RELEASE_VERSION: "1.0.1" # version
  TAG_NAME: "personal search assistant" #tag 只能小写开头
jobs:
  build:
    name: Github Action Release
    runs-on: ubuntu-latest # use latest ubuntu to run the job
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
      - run: npm install
      - run: npm run build
      - name: Sets build date
        run: echo "BUILD_DATE=$(date '+%Y%m%d')" >> $GITHUB_ENV
      - name: Get Version From Package.js
        run: grep '"version":.*' abcd.md | grep '[0-9].*[0-9].*[0-9]' | sed 's/"version"//g' | sed 's/^.*://g' | sed 's/",.*$//g' | sed 's/"//g' | sed 's/://g' | sed 's/ //g' | sed '1i \
STATE_RELEASE_VERSION='  > Version.log
      - name: From Version.log to GITHUB_ENV
        run: tail ./Version.log >> $GITHUB_ENV
      - name: Show Files
        run: ls -a
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.STATE_RELEASE_VERSION }}
          release_name: Release ${{ env.BUILD_DATE}}
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./artifacts/personal_search_assistant-v${{ env.STATE_RELEASE_VERSION}}-production.zip
          asset_name: personal_search_assistant-v${{ env.STATE_RELEASE_VERSION}}-production.zip
          asset_content_type: application/zip
      #https://github.com/8398a7/action-slack
#      - name: Slack Nofitication
#        uses: 8398a7/action-slack@v3
#        with:
#          status: ${{ job.status }}
#          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took # selectable (default: repo,message)
#        env:
#          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
#        if: always() # Pick up events even if the job fails or is canceled.